#!/bin/bash
#
# Log file pattern detector plugin for Nagios
# Written by Mariano Spadaccini
#
# Usage: ./check_log <log_file> <pattern>
#
# Description:
#
# This plugin will scan a log file (specified by the <log_file> option)
# for a specific pattern (specified by the <pattern> option).
#
# Output:
#
# The plugin will return an OK state if *no* pattern matches have been found
# in the log file. If the plugin detects any pattern matches in the log,
# it will return a CRITICAL state and print out a message is the following
# format: "(x) last_match", where "x" is the total number of pattern matches
# found in the file and "last_match" is the last entry in the log file
# which matches the pattern.
#
# Notes:
#
# Examples:
#
# Check for login failures in the syslog...
#
#   check_log /var/log/messages "LOGIN FAILURE"
#

# Paths to commands used in this script.  These
# may have to be modified to match your system setup.

PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"
export PATH
PROGNAME=$(basename "$0")
PROGPATH=$(echo "$0" | sed -e 's,[\\/][^\\/][^\\/]*$,,')
REVISION="0.1.0"
PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"

export PATH

. "$PROGPATH"/utils.sh

print_usage() {
    echo "Usage: $PROGNAME -F logfile -q query"
    echo "Usage: $PROGNAME --help"
    echo "Usage: $PROGNAME --version"
    echo "     Additional parameter:"
    echo "        -w (--max_warning) If used, determines the maximum matching value to return as warning, when finding more matching lines than this parameter will return as critical. If not used, will consider as default 0 (any matching will consider as critical)"
    echo "Usage: $PROGNAME -F logfile -q query -w <number>"
}

print_help() {
    print_revision "$PROGNAME" $REVISION
    echo ""
    print_usage
    echo ""
    echo "Log file pattern detector plugin for Nagios"
    echo ""
    support
}

# Make sure the correct number of command line
# arguments have been supplied

if [ $# -lt 1 ]; then
    print_usage
    exit "$STATE_UNKNOWN"
fi

# Grab the command line arguments

#logfile=$1
#query=$2
exitstatus=$STATE_WARNING #default
while test -n "$1"; do
    case "$1" in
        --help)
            print_help
            exit "$STATE_OK"
            ;;
        -h)
            print_help
            exit "$STATE_OK"
            ;;
        --version)
            print_revision "$PROGNAME" $REVISION
            exit "$STATE_OK"
            ;;
        -V)
            print_revision "$PROGNAME" $REVISION
            exit "$STATE_OK"
            ;;
        --filename)
            logfile=$2
            shift
            ;;
        -F)
            logfile=$2
            shift
            ;;
        --max_warning)
            MAX_WARNING=$2
            shift
            ;;
        -w)
            MAX_WARNING=$2
            shift
            ;;
        --query)
            query=$2
            shift
            ;;
        -q)
            query=$2
            shift
            ;;
        -x)
            exitstatus=$2
            shift
            ;;
        --exitstatus)
            exitstatus=$2
            shift
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit "$STATE_UNKNOWN"
            ;;
    esac
    shift
done

# If the source log file doesn't exist, exit
if [ ! -e "$logfile" ]; then
    echo "Log check error: Log file $logfile does not exist!"
    exit "$STATE_UNKNOWN"
elif [ ! -r "$logfile" ] ; then
    echo "Log check error: Log file $logfile is not readable!"
    exit "$STATE_UNKNOWN"
fi

# Count the number of matching log entries we have and handle errors when grep fails
count=$(grep -c "$query" "$logfile" 2>&1)
if [[ $? -gt 1 ]];then
    echo "Log check error: $count"
    exit "$STATE_UNKNOWN"
fi

# Get the last matching entry in the log file
lastentry=$(egrep "$query" "$logfile" | tail -1)

if [ "$count" = "0" ]; then # no matches, exit with no error
    echo "Log check ok - 0 pattern matches found|match=$count;;;0"
    exitstatus=$STATE_OK
else # Print total matche count and the last entry we found
    echo "($count) $lastentry|match=$count;;;0"
    if [ "$MAX_WARNING" ] && [ "$count" -le "$MAX_WARNING" ] ; then
        exitstatus=$STATE_WARNING
    else
        exitstatus=$STATE_CRITICAL
    fi
fi

exit "$exitstatus"
